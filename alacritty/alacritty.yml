env:
  TERM: xterm-256color

window:
  dimensions:
    columns: 0
    lines: 0

  padding:
    x: 4
    y: 6

  dynamic_padding: true
  decorations: buttonless
  startup_mode: Windowed

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 3

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: "Cascadia Code PL"
    # Style can be specified to pick a specific face.
    # style: Regular

  # The bold font face
  bold:
    family: "Cascadia Code PL"
    # family: "Droid Sans Mono"
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: "Cascadia Code PL"
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 13.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.test_test1
  glyph_offset:
    x: 0
    y: 1

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

# Colors (One Dark)
colors:
  # Default colors
  primary:
    background: '0x322A2D'
    foreground: '0xcbbec2'

  # Normal colors
  normal:
    black:   '0x272022'
    red:     '0xe3541c'
    green:   '0x49e9a6'
    yellow:  '0xe4b781'
    blue:    '0x49a6e9'
    magenta: '0x7060eb'
    cyan:    '0x49d6e9'
    white:   '0xcbbec2'
    brwhite: '0xffffff'
    brblue:  '0x49e9a6'
  bright:
    black:   '0x8b747c'
    red:     '0xe3541c'
    green:   '0x49e9a6'
    yellow:  '0xd5971a'
    blue:    '0x49a6e9'
    magenta: '0x7060eb'
    cyan:    '0x49d6e9'
    white:   '0xffffff'
    brwhite: '0xffffff'
    brblue:  '0x49e9a6'


# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
background_opacity: 1

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  hide_when_typing: false
  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  # faux_scrollback_lines: 1

  url:
      # URL launcher
      #
      # This program is executed when clicking on a text which is recognized as a URL.
      # The URL is always added to the command as the last parameter.
      launcher: open

      # URL modifiers
      #
      # These are the modifiers that need to be held down for opening URLs when clicking
      # on them. The available modifiers are documented in the key binding section.
      #modifiers: Control|Shift

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

dynamic_title: true

cursor:
  # Style of the cursor
  #
  # Values for 'cursor_style':
  # - Block
  # - Underline
  # - Beam
  style: Beam

  # Whether the cursor should be a hollow block on window focus loss
  unfocused_hollow: true

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
# shell:
#   program: /bin/bash
#   args:
#     - --login
# shell:
#   program: /bin/bash
#   args:
#     - -l
#     - -c
#     - "tmux -u a || tmux -u"

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
# DEBUG
# To debug keycodes run alacrity in --print-events mode --->
# Alacritty.app/Contents/MacOS/alacritty --print-events | grep "state: Pressed"
key_bindings:
   # Custom actions and shortcuts
  - { key: Comma,     mods: Command,      command:
    {program: "/usr/local/bin/code", args: ["~/.dotfiles"]}     }
  - { key: N,         mods: Command,      action: SpawnNewInstance       }
  # Custom key overrides
  - { key: Space,     mods: Alt,          chars: " " }
  - { key: Key2,      mods: Alt,    chars: "@" }
  - { key: Key3,      mods: Alt,    chars: "#" }
  - { key: Key4,      mods: Alt,    chars: "$" }
  - { key: 23,       mods: Alt,    chars: "~" }
  - { key: Key5,     mods: Alt,    chars: "~" }
  - { key: Key6,      mods: Alt,    chars: "^" }
  - { key: Key7,      mods: Alt,    chars: "&" }
  - { key: Key8,      mods: Alt,    chars: "*" }
  - { key: Key9,      mods: Alt,    chars: "{" }
  - { key: Key0,      mods: Alt,    chars: "}" }
  - { key: 33,      mods: Alt,    chars: "[" }
  - { key: 30,      mods: Alt,    chars: "]" }
  - { key: 3,      mods: Alt,    chars: "[" }
  - { key: 5,      mods: Alt,    chars: "]" }
  - { key: 11,      mods: Alt,    chars: "{" }
  - { key: 45,      mods: Alt,    chars: "}" }
  - { key: 25,      mods: Alt,    chars: "{" }
  - { key: 29,      mods: Alt,    chars: "}" }
  - { key: 42,      mods: Alt,    chars: "|" }
  - { key: 43,      mods: Alt,    chars: "<" }
  - { key: 47,      mods: Alt,    chars: ">" }
  - { key: 39,      mods: Alt,    chars: "`" } # ZSH related key bindings
  - { key: Left,      mods: Command,    chars: "\x01" } # ZSH beggining of line
  - { key: Right,      mods: Command,    chars: "\x05" } # ZSH end of line
  - { key: Left,      mods: Alt,    chars: "\x1b\x62" } # ZSH beggining of line
  - { key: Right,      mods: Alt,    chars: "\x1b\x66" } # ZSH end of line
  - { key: Back,      mods: Command,    chars: "\x18\x7f" } # ZSH delete all to left
  - { key: Delete,      mods: Command,    chars: "\x0b" } # ZSH delete all to right
  - { key: Back,      mods: Alt,    chars: "\x1b\x08" } # ZSH delete one word to left
  - { key: Delete,      mods: Alt,    chars: "\x1b\x64" } # ZSH delete one word to right
  - { key: Z,      mods: Command,    chars: "\x1f" } # ZSH undo
  - { key: Y,      mods: Command,    chars: "\x18\x1f" } # ZSH redo